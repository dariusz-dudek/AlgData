// <auto-generated />
using System;
using DataStructureAPI.Controllers.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataStructureAPI.Migrations
{
    [DbContext(typeof(DataStructureContext))]
    partial class DataStructureContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DataStructureAPI.Data.Entries.BaseEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BigONotationValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BaseEntities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8a90f00b-1f7e-4da2-bd2f-cd20019b62c9"),
                            BigONotationValue = "N",
                            Description = "Stack Class. Represents a simple last-in-first-out (LIFO) non-generic collection of objects.",
                            Name = "Stack"
                        },
                        new
                        {
                            Id = new Guid("98956246-de82-4e5e-ae8c-71f8cba8ff8f"),
                            BigONotationValue = "N",
                            Description = "Queue Class. Represents a first-in, first-out collection of objects.",
                            Name = "Queue"
                        },
                        new
                        {
                            Id = new Guid("d6b1e586-a588-4112-abee-31bd3a592f39"),
                            BigONotationValue = "N",
                            Description = "LinkedList<T> Class. Represents a doubly linked list.",
                            Name = "LinkedList"
                        },
                        new
                        {
                            Id = new Guid("7b0608a2-6097-4cb2-b961-f5790d2bee2e"),
                            BigONotationValue = "N",
                            Description = "Hashtable Class. Represents a collection of key/value pairs that are organized based on the hash code of the key.",
                            Name = "HashTable"
                        },
                        new
                        {
                            Id = new Guid("c0761b5f-f7e9-412b-973b-86171d40aa2d"),
                            BigONotationValue = "N",
                            Description = "Hashtable Class. A Binary Search Tree is a binary tree with search properties where elements in the left sub-tree are less than to the root and elements in the right sub-tree are greater than to the root.",
                            Name = "BinarySearchTree"
                        },
                        new
                        {
                            Id = new Guid("304fbe62-b312-4411-be3c-573797e9f422"),
                            BigONotationValue = "N",
                            Description = "A Graph is a data structure that contains a finite number of vertices (or nodes) and a finite set of edges connecting the vertices",
                            Name = "Graph"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
